#!/usr/bin/tclsh

proc print_header {} {
	puts {
<!doctype html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>fs2tabtree</title>
<style>
html {
	color: #ccc;
	background: #333;
	padding: 1em;
	font-family: 'Jetbrains Mono', monospace;
}
/* initial state */
.tabtree {
	line-height: 1.6em;
}
.tabtree section {
	clip: rect(0,0,0,0); position: absolute; /* hide without using display prop */
}
.tabtree label {
	user-select: none;
	border: 1px solid transparent;
	padding: 0.1em 0.5em;
}
.tabtree label:hover {
	background: #555;
}
/* checked state */
.tabtree input:checked + label {
	border: 1px solid #ccc;
}
.tabtree input:checked + label + section {
	clip: auto; position: static; /* unhide without using display prop */
}
/* hide radio buttons */
.tabtree input {
	display: none;
}
/* hacks to make it tabs... */
.tabtree,
.tabtree section {
	padding: 0;
	margin: 0;
	display: flex;
	flex-wrap: wrap;
	flex-direction: column;
	align-content: flex-start;
}
</style>
</head>
<body>
	}
}

proc print_footer {} {
	puts {
</body>
<script>
/**
convert inline style unit lh to px. (only one per style, cause lazy...)
@root root html dom node. (@selector wont find this!)
@tpl use this html element for measuring. (will be created+deleted)
@lazy if true, use the first calculated lh height for everything
@selector change only these css matching elements
*/
function lh2px (root, tpl="span", lazy = true, selector = "*[style]")
{
	let lh_in_px = null;
	let lh_regex = /([a-z-]+)\s*:\s*([0-9]+)lh/;
	for (let elem of root.querySelectorAll(selector)) {
		let lh_match = elem.getAttribute("style").match(lh_regex);
		if (!lh_match) {
			continue;
		}
		let lh_prop = lh_match[1];
		let lh_valu = lh_match[2];
		if (!lazy || !lh_in_px) {
			let delme = document.createElement(tpl);
			delme.textContent = "X";
			elem.appendChild(delme);
			lh_in_px = delme.getBoundingClientRect().height; // TODO: will lh even be this big?
			elem.removeChild(delme);
			delete delme;
		}
		elem.style[lh_prop] = (lh_in_px * lh_valu) + "px";
	}
}
let root = document.querySelector(".tabtree").parentNode;
lh2px(root, "label");
</script>
</html>
	}
}

proc sorted_children {dir} {
	set dirs  [lsort -dictionary [glob -nocomplain -directory $dir -types d *]]
	set files [lsort -dictionary [glob -nocomplain -directory $dir -types f *]]
	return [list {*}$dirs {*}$files]
}

proc loot_path {path root} {
	set path_type [file type $path]
	set path_tail [file tail $path]
	set relative  [string range $path [string length $root] [string length $path]]
	set parent    [file dirname $relative]

	switch $path_type {
		directory {
			set children [sorted_children $path]
			set count    [llength $children]
			set order    [expr $count + 1]

			if { "$path" == "$root" } {
				puts "<section class='tabtree' style='height:${count}lh'>"
			} else {
				puts "<input  id='${relative}' name='${parent}' type='radio'/>"
				puts "<label for='${relative}'>${path_tail}</label>"
				puts "<section style='order:${order};height:${count}lh'>"
			}

			foreach child $children {
				loot_path $child $root
			}

			puts "</section>"
		}
		file {
			puts "<input  id='${relative}' name='${parent}' type='radio'/>"
			puts "<label for='${relative}'>${path_tail}</label>"
		}
	}
}

if { $argc < 1 } {
	puts "gimme a path to directory"
	exit 1
}

print_header
loot_path [lindex $argv 0] [lindex $argv 0]
print_footer
